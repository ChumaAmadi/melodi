generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  spotifyId             String?                @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  genreMoodCorrelations GenreMoodCorrelation[]
  journalEntries        JournalEntry[]
  listeningHistory      ListeningHistory[]
  sessions              Session[]
}

model ListeningHistory {
  id         String   @id @default(cuid())
  userId     String
  trackId    String
  trackName  String
  artistName String
  albumName  String
  playedAt   DateTime
  duration   Int
  energy     Float?
  valence    Float?
  tempo      Float?
  key        Int?
  mode       Int?
  genre      String?
  subGenres  String[]
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([playedAt])
  @@index([genre])
}

model JournalEntry {
  id           String   @id @default(cuid())
  userId       String
  content      String
  selectedMood String?
  moodSummary  String?
  weekOf       DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([weekOf])
}

model GenreMoodCorrelation {
  id        String   @id @default(cuid())
  userId    String
  genre     String
  mood      String
  strength  Float
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, genre, mood])
  @@index([userId])
  @@index([genre])
  @@index([mood])
}

model ArtistGenreCache {
  artistId    String   @id
  mainGenres  String[]
  subGenres   String[]
  lastUpdated DateTime @default(now())

  @@index([lastUpdated])
}
